name: Build and Release

on:
  push:
    tags:
      - 'v*'

  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        type: choice
        required: true
        default: 'test'
        options:
          - test
          - release
      platform:
        description: 'Target platform (leave empty for all platforms)'
        type: choice
        required: false
        default: 'all'
        options:
          - all
          - linux
          - macos
          - windows

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            type: 'macos'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            type: 'macos'
          - platform: 'ubuntu-22.04'
            args: ''
            type: 'linux'
          - platform: 'windows-latest'
            args: ''
            type: 'windows'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Check if should run
        id: should_run
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" && \
                ("${{ github.event.inputs.platform }}" == "all" || \
                 "${{ github.event.inputs.platform }}" == "${{ matrix.type }}") ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - uses: actions/checkout@v4
        if: steps.should_run.outputs.run == 'true'

      - name: Setup Node
        if: steps.should_run.outputs.run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install Rust
        if: steps.should_run.outputs.run == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        if: steps.should_run.outputs.run == 'true'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ runner.os }}-rust-${{ matrix.platform }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' && steps.should_run.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf \
            libsqlite3-dev libbz2-dev rpm libfuse2 fuse squashfs-tools build-essential gcc-multilib g++-multilib

          # Clean cargo cache to avoid potential issues
          cargo clean

          # Set environment variables for Linux build
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "SQLITE3_DIR=/usr" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static -C link-arg=-Wl,--allow-multiple-definition" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV

          # Create symbolic links for static libraries if they don't exist
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libsqlite3.a /usr/lib/libsqlite3.a
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libbz2.a /usr/lib/libbz2.a

      - name: Setup AppImage tools (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' && steps.should_run.outputs.run == 'true'
        run: |
          sudo wget -O /usr/local/bin/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          sudo chmod +x /usr/local/bin/appimagetool

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' && steps.should_run.outputs.run == 'true'
        run: |
          brew list sqlite3 || brew install sqlite3
          brew list bzip2 || brew install bzip2
          echo "SQLITE3_DIR=$(brew --prefix sqlite3)" >> $GITHUB_ENV
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix sqlite3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix sqlite3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+cxx-exceptions" >> $GITHUB_ENV
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        shell: pwsh
        run: |
          # Download and install VS Build Tools
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe
          Start-Process -FilePath .\vs_buildtools.exe -ArgumentList "--quiet", "--wait", "--norestart", "--nocache", `
            "--installPath", "C:\BuildTools", `
            "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
            "--add", "Microsoft.VisualStudio.Component.Windows10SDK.19041" `
            -NoNewWindow -Wait

      - name: Setup Windows SDK and MSVC
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        shell: pwsh
        run: |
          # Get Visual Studio installation path
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          if (-not $vsPath) {
            throw "Visual Studio installation not found"
          }

          # Get VC Tools version
          $vcToolsVersionFile = Join-Path $vsPath "VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
          $vcToolsVersion = Get-Content $vcToolsVersionFile

          # Get Windows SDK information
          $sdkRegPath = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0"
          $sdkProps = Get-ItemProperty $sdkRegPath
          $sdkDir = $sdkProps.InstallationFolder
          $sdkVersion = "$($sdkProps.ProductVersion).0"

          # Set basic environment variables
          echo "VSINSTALLDIR=$vsPath" >> $env:GITHUB_ENV
          echo "VCINSTALLDIR=$vsPath\VC\" >> $env:GITHUB_ENV
          echo "VCToolsInstallDir=$vsPath\VC\Tools\MSVC\$vcToolsVersion\" >> $env:GITHUB_ENV
          echo "VCToolsVersion=$vcToolsVersion" >> $env:GITHUB_ENV
          echo "WindowsSdkDir=$sdkDir" >> $env:GITHUB_ENV
          echo "WindowsSDKVersion=$sdkVersion" >> $env:GITHUB_ENV
          echo "WindowsLibPath=$sdkDir\UnionMetadata\$sdkVersion;$sdkDir\References\$sdkVersion" >> $env:GITHUB_ENV
          echo "PreferredToolArchitecture=x64" >> $env:GITHUB_ENV
          echo "Platform=x64" >> $env:GITHUB_ENV

          # Set include paths
          $includePaths = @(
            "$vsPath\VC\Tools\MSVC\$vcToolsVersion\include",
            "$vsPath\VC\Tools\MSVC\$vcToolsVersion\atlmfc\include",
            "$sdkDir\Include\$sdkVersion\ucrt",
            "$sdkDir\Include\$sdkVersion\um",
            "$sdkDir\Include\$sdkVersion\shared"
          )
          echo "INCLUDE=$($includePaths -join ';')" >> $env:GITHUB_ENV

          # Set library paths
          $libPaths = @(
            "$vsPath\VC\Tools\MSVC\$vcToolsVersion\lib\x64",
            "$sdkDir\Lib\$sdkVersion\um\x64",
            "$sdkDir\Lib\$sdkVersion\ucrt\x64"
          )
          echo "LIB=$($libPaths -join ';')" >> $env:GITHUB_ENV

          # Add to PATH
          $toolPaths = @(
            "$vsPath\VC\Tools\MSVC\$vcToolsVersion\bin\HostX64\x64",
            "$sdkDir\bin\$sdkVersion\x64"
          )
          echo "$($toolPaths -join [System.IO.Path]::PathSeparator)" >> $env:GITHUB_PATH

          # Set LLVM path
          $llvmPath = "C:\Program Files\LLVM"
          if (-not (Test-Path $llvmPath)) {
              # Install LLVM if not present
              winget install -e --id LLVM.LLVM
          }
          echo "LLVM_PATH=$llvmPath" >> $env:GITHUB_ENV

          # Print environment info for debugging
          echo "Environment setup complete:"
          echo "VS Installation: $vsPath"
          echo "VC Tools Version: $vcToolsVersion"
          echo "Windows SDK: $sdkDir"

      - name: Setup Windows build env
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        shell: pwsh
        run: |
          # Set environment variables for Windows build
          echo "VCPKGRS_TRIPLET=x64-windows-static-md" >> $env:GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static-md" >> $env:GITHUB_ENV
          echo "VCPKG_DEFAULT_HOST_TRIPLET=x64-windows-static-md" >> $env:GITHUB_ENV
          echo 'RUSTFLAGS=-C target-feature=+crt-static -C link-args="/NODEFAULTLIB:libcmt.lib" -C link-args="/DEFAULTLIB:msvcrt.lib"' >> $env:GITHUB_ENV
          
          # Set additional environment variables for static linking
          echo "VCPKG_CRT_LINKAGE=static" >> $env:GITHUB_ENV
          echo "VCPKG_LIBRARY_LINKAGE=static" >> $env:GITHUB_ENV

      - name: Setup vcpkg
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        shell: pwsh
        run: |
          # Clone and setup vcpkg
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install

          # Set vcpkg environment variables
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $env:GITHUB_ENV

          # Install required packages with specific triplet
          .\vcpkg.exe install sqlite3:x64-windows-static-md bzip2:x64-windows-static-md --clean-after-build

          # Verify installation
          .\vcpkg.exe list

      - name: Cache vcpkg
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Cache VS Build Tools
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        uses: actions/cache@v3
        with:
          path: C:\BuildTools
          key: ${{ runner.os }}-vs-buildtools-17

      - name: Run tests
        if: steps.should_run.outputs.run == 'true'
        working-directory: ./src-tauri
        run: cargo test

      - name: Install frontend dependencies
        if: steps.should_run.outputs.run == 'true'
        run: yarn install

      - name: Build Rust project
        if: steps.should_run.outputs.run == 'true'
        uses: tauri-apps/tauri-action@v0.5.19
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          RUST_BACKTRACE: 1
          CARGO_TERM_COLOR: always
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_HOME: ${{ matrix.platform == 'ubuntu-22.04' && format('{0}/.cargo', github.workspace) || null }}
        with:
          projectPath: .
          distPath: .
          args: ${{ matrix.args }}
          tagName: ${{ github.event_name == 'push' && github.ref_name || 'dev' }}
          releaseName: ChatSpeed ${{ github.event_name == 'push' && github.ref_name || 'dev' }}
          releaseBody: |
            See the assets to download this version and install.

            Available packages:
            - Windows: .msi, .exe
            - macOS: .dmg (Intel and Apple Silicon)
            - Linux: .deb, .rpm, .AppImage
          releaseDraft: true
          prerelease: ${{ github.event_name != 'push' }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
