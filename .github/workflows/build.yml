name: Release Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Build Platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos
          - windows
          - linux
  push:
    tags:
      - 'v*'

permissions: write-all
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
  CARGO_TERM_COLOR: always

jobs:
  release-windows:
    if: github.event_name == 'push' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_INSTALLATION_ROOT }}/installed
            ${{ env.VCPKG_INSTALLATION_ROOT }}/packages
          key: ${{ runner.os }}-vcpkg-${{ matrix.target }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.target }}-
            ${{ runner.os }}-vcpkg-

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-rust-${{ matrix.target }}"
          workspaces: src-tauri
          cache-targets: false
          cache-on-failure: true

      - name: Setup vcpkg env
        shell: pwsh
        run: |
          # Set vcpkg root directory
          $VCPKG_ROOT = "$env:VCPKG_INSTALLATION_ROOT"
          echo "VCPKG_ROOT=$VCPKG_ROOT" >> $env:GITHUB_ENV

          # Set target architecture variables
          if ("${{ matrix.target }}" -eq "x86_64-pc-windows-msvc") {
            echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static" >> $env:GITHUB_ENV
            echo "CARGO_CFG_TARGET_ARCH=x86_64" >> $env:GITHUB_ENV
          } else {
            echo "VCPKG_DEFAULT_TRIPLET=arm64-windows-static" >> $env:GITHUB_ENV
            echo "CARGO_CFG_TARGET_ARCH=aarch64" >> $env:GITHUB_ENV
          }

          # Set common vcpkg variables
          echo "VCPKG_INSTALLED_DIR=$VCPKG_ROOT/installed" >> $env:GITHUB_ENV
          echo "VCPKG_CRT_LINKAGE=static" >> $env:GITHUB_ENV
          echo "VCPKG_LIBRARY_LINKAGE=static" >> $env:GITHUB_ENV

      - name: Install dependencies (windows)
        shell: pwsh
        run: |
          # Set dependency paths
          if ("${{ matrix.target }}" -eq "x86_64-pc-windows-msvc") {
            $TRIPLET = "x64-windows-static"
          } else {
            $TRIPLET = "arm64-windows-static"
          }

          # Set library directory variables
          $SQLITE3_LIB_DIR = "$env:VCPKG_ROOT/installed/$TRIPLET/lib"
          $SQLITE3_INCLUDE_DIR = "$env:VCPKG_ROOT/installed/$TRIPLET/include"

          echo "SQLITE3_LIB_DIR=$SQLITE3_LIB_DIR" >> $env:GITHUB_ENV
          echo "SQLITE3_INCLUDE_DIR=$SQLITE3_INCLUDE_DIR" >> $env:GITHUB_ENV

          # Install dependencies
          Write-Host "Installing dependencies for triplet: $TRIPLET"
          vcpkg install "sqlite3:$TRIPLET"
          vcpkg install "bzip2:$TRIPLET"

          # Verify installation
          Write-Host "Verifying installation..."
          Write-Host "Checking SQLite3 lib directory: $SQLITE3_LIB_DIR"

          if (Test-Path $SQLITE3_LIB_DIR) {
            Write-Host "SQLite3 lib directory exists, contents:"
            Get-ChildItem $SQLITE3_LIB_DIR
          } else {
            Write-Host "Error: SQLite3 lib directory not found at: $SQLITE3_LIB_DIR"
            Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
            Write-Host "Installed directory contents:"
            Get-ChildItem "$env:VCPKG_ROOT/installed"
            exit 1
          }

      - name: Setup Rust env
        shell: pwsh
        run: |
          # Set Rust environment variables
          echo "RUSTFLAGS=-Ctarget-feature=+crt-static" >> $env:GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $env:GITHUB_ENV

          # Set vcpkg integration environment variables
          echo "VCPKGRS_DYNAMIC=0" >> $env:GITHUB_ENV
          echo "VCPKGRS_TRIPLET=$env:VCPKG_DEFAULT_TRIPLET" >> $env:GITHUB_ENV

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Yarn Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install
        run: yarn install --immutable

      - name: Build Frontend
        run: yarn build

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.target }}

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 30

  release-macos:
    if: github.event_name == 'push' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_INSTALLATION_ROOT }}/installed
            ${{ env.VCPKG_INSTALLATION_ROOT }}/packages
          key: ${{ runner.os }}-vcpkg-${{ matrix.target }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.target }}-
            ${{ runner.os }}-vcpkg-

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-rust-${{ matrix.target }}"
          workspaces: src-tauri
          cache-targets: false
          cache-on-failure: true

      - name: Install dependencies (macOS)
        run: |
          brew list sqlite3 || brew install sqlite3
          if ! brew list bzip2 &>/dev/null; then
            brew install bzip2 || echo "bzip2 installation failed, but may already be available system-wide"
          fi
          echo "SQLITE3_DIR=$(brew --prefix sqlite3)" >> $GITHUB_ENV
          BZIP2_PREFIX=$(brew --prefix bzip2 2>/dev/null || echo "/usr/local")
          echo "LDFLAGS=-L$(brew --prefix sqlite3)/lib -L$BZIP2_PREFIX/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix sqlite3)/include -I$BZIP2_PREFIX/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix sqlite3)/lib/pkgconfig:$BZIP2_PREFIX/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Yarn Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install
        run: yarn install --immutable

      - name: Build Frontend
        run: yarn build

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target ${{ matrix.target }}

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
          retention-days: 30

  release-linux:
    if: github.event_name == 'push' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'linux'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_INSTALLATION_ROOT }}/installed
            ${{ env.VCPKG_INSTALLATION_ROOT }}/packages
          key: ${{ runner.os }}-vcpkg-${{ matrix.target }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.target }}-
            ${{ runner.os }}-vcpkg-

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-rust-${{ matrix.target }}"
          workspaces: src-tauri
          cache-targets: false
          cache-on-failure: true

      - name: Install dependencies (ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            sqlite3 \
            libsqlite3-dev

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Yarn Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install
        run: yarn install --immutable

      - name: Build Frontend
        run: yarn build

      - name: Tauri build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target x86_64-unknown-linux-gnu

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64-unknown-linux-gnu
          path: |
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/rpm/*.rpm
          retention-days: 30
