name: Build and Release

on:
  push:
    tags:
      - 'v*'

  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        type: choice
        required: true
        default: 'test'
        options:
          - test
          - release
      platform:
        description: 'Target platform (leave empty for all platforms)'
        type: choice
        required: false
        default: 'all'
        options:
          - all
          - linux
          - macos
          - windows

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            type: 'macos'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            type: 'macos'
          - platform: 'ubuntu-22.04'
            args: ''
            type: 'linux'
          - platform: 'windows-latest'
            args: ''
            type: 'windows'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Check if should run
        id: should_run
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" && \
                ("${{ github.event.inputs.platform }}" == "all" || \
                 "${{ github.event.inputs.platform }}" == "${{ matrix.type }}") ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - uses: actions/checkout@v4
        if: steps.should_run.outputs.run == 'true'

      - name: Setup Node
        if: steps.should_run.outputs.run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' && steps.should_run.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libsqlite3-dev
          
          # 确保静态链接
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "SQLITE3_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          echo "SQLX_STATIC=1" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' && steps.should_run.outputs.run == 'true'
        run: |
          brew list sqlite3 || brew install sqlite3
          brew list bzip2 || brew install bzip2
          echo "SQLITE3_DIR=$(brew --prefix sqlite3)" >> $GITHUB_ENV
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix sqlite3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix sqlite3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+cxx-exceptions" >> $GITHUB_ENV
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Install dependencies (windows only)
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        run: |
          vcpkg install sqlite3:x64-windows-static
          echo "SQLITE3_STATIC=1" >> $env:GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV

      - name: Rust setup
        if: steps.should_run.outputs.run == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        if: steps.should_run.outputs.run == 'true'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        if: steps.should_run.outputs.run == 'true'
        run: yarn install

      - name: Build the app
        if: steps.should_run.outputs.run == 'true'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Release ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
