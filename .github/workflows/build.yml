name: Build and Release

on:
  push:
    tags:
      - 'v*'

  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        type: choice
        required: true
        default: 'test'
        options:
          - test
          - release
      platform:
        description: 'Target platform (leave empty for all platforms)'
        type: choice
        required: false
        default: 'all'
        options:
          - all
          - linux
          - macos
          - windows

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            type: 'macos'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            type: 'macos'
          - platform: 'ubuntu-22.04'
            args: ''
            type: 'linux'
          - platform: 'windows-latest'
            args: ''
            type: 'windows'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Check if should run
        id: should_run
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" && \
                ("${{ github.event.inputs.platform }}" == "all" || \
                 "${{ github.event.inputs.platform }}" == "${{ matrix.type }}") ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - uses: actions/checkout@v4
        if: steps.should_run.outputs.run == 'true'

      - name: Setup Node
        if: steps.should_run.outputs.run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install dependencies (ubuntu)
        if: matrix.platform == 'ubuntu-22.04' && steps.should_run.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsqlite3-dev \
            libbz2-dev \
            clang \
            lld \
            libssl-dev \
            libayatana-appindicator3-dev \
            libsoup-3.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            cmake \
            pkg-config

          echo "System information:"
          uname -a
          lsb_release -a

          echo "Installed packages:"
          dpkg -l | grep -E 'webkit|gtk|ssl|indicator|sqlite|bzip2|clang|lld'

          echo "Library paths:"
          ldconfig -p | grep -E 'sqlite|bzip2|webkit|gtk'

          # Set environment variables
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "BZIP2_STATIC=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

          # Show system SSL information
          echo "System SSL information:"
          openssl version

          echo "pkg-config paths:"
          pkg-config --list-all | grep -E 'gtk|webkit'

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest' && steps.should_run.outputs.run == 'true'
        run: |
          brew list sqlite3 || brew install sqlite3
          brew list bzip2 || brew install bzip2
          echo "SQLITE3_DIR=$(brew --prefix sqlite3)" >> $GITHUB_ENV
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix sqlite3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix sqlite3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+cxx-exceptions" >> $GITHUB_ENV
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Install dependencies (windows only)
        if: matrix.platform == 'windows-latest' && steps.should_run.outputs.run == 'true'
        shell: pwsh
        run: |
          Write-Host "Vcpkg integration status:"
          vcpkg integrate status
          
          Write-Host "Vcpkg version:"
          vcpkg version
          
          Write-Host "Installing dependencies via vcpkg..."
          vcpkg remove sqlite3:x64-windows-static-md --recurse
          vcpkg remove bzip2:x64-windows-static-md --recurse
          vcpkg install sqlite3:x64-windows-static-md --clean-after-build
          vcpkg install bzip2:x64-windows-static-md --clean-after-build
          
          Write-Host "Installed vcpkg packages:"
          vcpkg list
          
          Write-Host "Vcpkg root:"
          $vcpkgRoot = $env:VCPKG_ROOT
          Write-Host "VCPKG_ROOT: $vcpkgRoot"
          
          Write-Host "Setting environment variables..."
          echo "SQLITE3_STATIC=1" >> $env:GITHUB_ENV
          echo "BZIP2_STATIC=1" >> $env:GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static-md" >> $env:GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV
          echo "VCPKG_ROOT=$vcpkgRoot" >> $env:GITHUB_ENV
          
          Write-Host "Visual Studio information:"
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          Write-Host "VS Path: $vsPath"
          
          if ($vsPath) {
              $vcToolsVersionFile = Join-Path $vsPath "VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
              if (Test-Path $vcToolsVersionFile) {
                  $vcToolsVersion = Get-Content $vcToolsVersionFile
                  Write-Host "VC Tools Version: $vcToolsVersion"
                  
                  $vcvarsallPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
                  if (Test-Path $vcvarsallPath) {
                      Write-Host "Setting up VS environment..."
                      cmd /c "`"$vcvarsallPath`" x64 && set" | ForEach-Object {
                          if ($_ -match '=') {
                              $v = $_.split('=')
                              Set-Item -Force "env:$($v[0])" -Value "$($v[1])"
                          }
                      }
                  }
              }
          }
          
          Write-Host "Checking SQLite3 installation:"
          Get-ChildItem -Recurse -Path "$vcpkgRoot\installed\x64-windows-static-md" -Filter "sqlite3.h"
          Get-ChildItem -Recurse -Path "$vcpkgRoot\installed\x64-windows-static-md" -Filter "*.lib" | Where-Object { $_.Name -like "*sqlite*" }
          
          Write-Host "Environment variables:"
          Get-ChildItem env: | Format-Table -AutoSize

      - name: Rust setup
        if: steps.should_run.outputs.run == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        if: steps.should_run.outputs.run == 'true'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        if: steps.should_run.outputs.run == 'true'
        run: yarn install

      - name: Build the app
        if: steps.should_run.outputs.run == 'true'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Release ${{ github.ref_name }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
