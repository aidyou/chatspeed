name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf \
            libsqlite3-dev libbz2-dev

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew list sqlite3 || brew install sqlite3
          brew list bzip2 || brew install bzip2
          echo "SQLITE3_DIR=$(brew --prefix sqlite3)" >> $GITHUB_ENV
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix sqlite3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix sqlite3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+cxx-exceptions" >> $GITHUB_ENV
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.bat
          ./vcpkg/vcpkg integrate install
          ./vcpkg/vcpkg install sqlite3:x64-windows-static-md
          ./vcpkg/vcpkg install bzip2:x64-windows-static-md
          echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static-md" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_HOST_TRIPLET=x64-windows-static-md" >> $GITHUB_ENV
          echo "SQLITE3_DIR=$GITHUB_WORKSPACE/vcpkg/installed/x64-windows-static-md" >> $GITHUB_ENV
          echo "SQLITE3_STATIC=1" >> $GITHUB_ENV
          echo "VCPKGRS_DYNAMIC=1" >> $GITHUB_ENV

      - name: Run tests
        working-directory: ./src-tauri
        run: cargo test

      - name: Install frontend dependencies
        run: yarn install

      - name: Build Rust project
        uses: tauri-apps/tauri-action@v0.5.19
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          RUST_BACKTRACE: 1
          CARGO_TERM_COLOR: always
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        with:
          tagName: v__VERSION__
          releaseName: 'ChatSpeed v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          args: ${{ matrix.args }}
